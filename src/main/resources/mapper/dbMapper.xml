<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 映射文件，映射到对应的SQL接口 -->
<mapper namespace="com.pypay.sofa.aid.mapper.DataMapper">

    <!--返回的结果集，用于关联实体类属性和数据库字段 -->
    <!--如果实体类属性和数据库属性名保持一致，就不需要javaType和jdbcType（必须大写）属性 -->
    <resultMap id="Employee_resultMap" type="com.pypay.sofa.aid.mapper.Employee">
        <result column="empNo" property="empNo" javaType="java.lang.Integer" jdbcType="INTEGER" />
        <result column="eName" property="eName" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="job" property="job" javaType="java.lang.String" jdbcType="VARCHAR" />
        <result column="mgr" property="mgr" javaType="java.lang.Integer" jdbcType="INTEGER" />
        <result column="hireDate" property="hireDate" javaType="java.util.Date" jdbcType="DATE"/>
        <result column="sal" property="sal" javaType="java.lang.Double" jdbcType="DOUBLE" />
        <result column="comm" property="comm" javaType="java.lang.Double" jdbcType="DOUBLE" />
        <result column="deptNo" property="deptNo" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </resultMap>

    <!-- 查询数据 -->
    <!-- 入参定义：在接口定义中使用@Param注解(单参/多参都可使用) -->
    <!-- 语句末尾不能有分号：ORA-00911: invalid character -->
    <select id="testQuery" resultMap="Employee_resultMap">
        select t.EMPNO, t.ENAME, t.JOB, t.MGR, t.HIREDATE, t.SAL, t.COMM, t.DEPTNO from c##scott.emp t where 1=1
        <if test="empNo != null">
            and t.EMPNO &gt;= #{empNo}
        </if>
        order by t.EMPNO
    </select>

    <!-- 插入数据 -->
    <!-- 入参定义：实体类，会自动解析属性到对应的值-->
    <insert id="testInsert" parameterType="com.pypay.sofa.aid.mapper.Employee">
		insert into c##scott.emp (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
		values (#{empNo}, #{eName}, #{job}, #{mgr}, #{hireDate}, #{sal}, #{comm}, #{deptNo})
	</insert>

    <!-- 更新数据 -->
    <!-- 入参定义：在接口定义中使用@Param注解(多参情况，只能使用这种形式) -->
    <update id="testUpdate">
		UPDATE c##scott.emp SET COMM = #{comm}
		WHERE EMPNO = #{empNo}
	</update>

    <!-- 删除数据 -->
    <!-- 入参定义：parameterType指定输入参数(单参情况，亦可@Param注解) -->
    <delete id="testDelete" parameterType="java.lang.Integer">
		DELETE FROM c##scott.emp t WHERE t.EMPNO =#{empNo}
	</delete>

    <!-- 批量查询 -->
    <!-- 入参定义：使用[]数组array -->
    <select id="testMultiQuery" parameterType="int" resultMap="Employee_resultMap">
        select t.EMPNO, t.ENAME, t.JOB, t.MGR, t.HIREDATE, t.SAL, t.COMM, t.DEPTNO from c##scott.emp t where t.DEPTNO in
        <!-- arr：array中的具体值 -->
        <foreach collection="array" item="arr" index="no" open="(" separator="," close=")">
            #{arr}
        </foreach>
    </select>

    <!-- 批量插入 -->
    <!-- 入参定义：使用List集合对象 -->
    <insert id="testMultiInsert" parameterType="java.util.List">
        merge into c##scott.emp r
        <!-- insert 和update中所有的数据都需要从using中获取 -->
        using(
        <!-- item：list中的具体对象 -->
        <foreach collection="list" index="index" item="item" open="" close="" separator="union">
            select
            #{item.EMPNO,jdbcType=INTEGER} as EMPNO,
            #{item.ENAME,jdbcType=VARCHAR} as ENAME,
            #{item.JOB,jdbcType=VARCHAR} as JOB,
            #{item.MGR,jdbcType=INTEGER} as MGR,
            #{item.HIREDATE,jdbcType=DATE} as HIREDATE,
            #{item.SAL,jdbcType=DOUBLE} as SAL,
            #{item.COMM,jdbcType=DOUBLE} as COMM,
            #{item.DEPTNO,jdbcType=INTEGER} as DEPTNO
            from dual
        </foreach>
        ) tmp
        <!-- on后面的括弧不能省 -->
        on ( tmp.EMPNO = r.EMPNO)
        when matched THEN
        update set
        <!-- ORA-38104: 在on条件中的列是不可以更新的 -->
        <!-- r.EMPNO = tmp.EMPNO, -->
        r.ENAME = tmp.ENAME,
        r.JOB = tmp.JOB,
        r.MGR = tmp.MGR,
        r.HIREDATE = tmp.HIREDATE,
        r.SAL = tmp.SAL,
        r.COMM = tmp.COMM,
        r.DEPTNO = tmp.DEPTNO
        when not matched THEN
        insert
        <trim prefix="(" suffix=")" suffixOverrides=",">
            EMPNO,
            ENAME,
            JOB,
            MGR,
            HIREDATE,
            SAL,
            COMM,
            DEPTNO
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            tmp.EMPNO,
            tmp.ENAME,
            tmp.JOB,
            tmp.MGR,
            tmp.HIREDATE,
            tmp.SAL,
            tmp.COMM,
            tmp.DEPTNO
        </trim>
    </insert>

    <!-- 批量删除 -->
    <delete id="testMultiDelete">
        <!-- delete from emp where empno in(7980,7981) -->
        delete from c##scott.emp t where t.empno in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

</mapper>